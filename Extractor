#!/usr/bin/env python3
"""
Regular Expression Data Extraction
---------------------------------
This script extracts various data types from text using regular expressions.
Implementation for ALU regex data extraction project.
"""

import re
import argparse
import json
import sys

def extract_emails(text):
    """
    Extract email addresses from text.
    Examples: user@example.com, firstname.lastname@company.co.uk
    """
    email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b'
    return re.findall(email_regex, text)

def extract_urls(text):
    """
    Extract URLs from text.
    Examples: https://www.example.com, https://subdomain.example.org/page
    """
    url_regex = r'https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
    return re.findall(url_regex, text)

def extract_phone_numbers(text):
    """
    Extract phone numbers in various formats from text.
    Examples: (123) 456-7890, 123-456-7890, 123.456.7890
    """
    phone_regex = r'(?:\(\d{3}\)\s?|\d{3}[-.])\d{3}[-.]?\d{4}'
    return re.findall(phone_regex, text)

def extract_credit_cards(text):
    """
    Extract credit card numbers from text.
    Examples: 1234 5678 9012 3456, 1234-5678-9012-3456
    """
    cc_regex = r'\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b'
    return re.findall(cc_regex, text)

def extract_times(text):
    """
    Extract time expressions in 12-hour or 24-hour format from text.
    Examples: 14:30, 2:30 PM
    """
    time_regex = r'\b(?:(?:0?[1-9]|1[0-2]):[0-5][0-9]\s?(?:AM|PM|am|pm)|(?:[01]?[0-9]|2[0-3]):[0-5][0-9])\b'
    return re.findall(time_regex, text)

def extract_html_tags(text):
    """
    Extract HTML tags from text.
    Examples: <p>, <div class="example">, <img src="image.jpg" alt="description">
    """
    html_tag_regex = r'<\/?[a-z][\s\S]*?>'
    return re.findall(html_tag_regex, text, re.IGNORECASE)

def extract_hashtags(text):
    """
    Extract hashtags from text.
    Examples: #example, #ThisIsAHashtag
    """
    hashtag_regex = r'#[a-zA-Z0-9_]+\b'
    return re.findall(hashtag_regex, text)

def extract_currency_amounts(text):
    """
    Extract currency amounts from text.
    Examples: $19.99, $1,234.56
    """
    currency_regex = r'\$\d{1,3}(?:,\d{3})*(?:\.\d{2})?'
    return re.findall(currency_regex, text)

def extract_all_patterns(text):
    """
    Extract all supported patterns from the given text.
    Returns a dictionary with keys for each pattern type.
    """
    return {
        'emails': extract_emails(text),
        'urls': extract_urls(text),
        'phone_numbers': extract_phone_numbers(text),
        'credit_cards': extract_credit_cards(text),
        'times': extract_times(text),
        'html_tags': extract_html_tags(text),
        'hashtags': extract_hashtags(text),
        'currency_amounts': extract_currency_amounts(text)
    }

def process_file(file_path):
    """Process a file and extract all patterns from its content."""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            return extract_all_patterns(content)
    except Exception as e:
        return {"error": f"Failed to process file: {str(e)}"}

def main():
    """Main function to run the script from command line."""
    parser = argparse.ArgumentParser(description='Extract data patterns using regular expressions.')
    group = parser.add_mutually_exclusive_group()  # Removed required=True
    group.add_argument('-t', '--text', help='Text string to process')
    group.add_argument('-f', '--file', help='File path to process')
    parser.add_argument('-o', '--output', help='Output file path for JSON results')
    
    if len(sys.argv) == 1:
        # No arguments provided, show help and prompt for input
        parser.print_help()
        print("\nNo arguments provided. Enter text to analyze (or 'q' to quit):")
        user_input = input("> ")
        if user_input.lower() == 'q':
            sys.exit(0)
        results = extract_all_patterns(user_input)
    else:
        args = parser.parse_args()
        
        if args.text:
            results = extract_all_patterns(args.text)
        elif args.file:
            results = process_file(args.file)
        else:
            # This case should not happen with the changes, but just in case
            parser.print_help()
            print("\nPlease provide either -t/--text or -f/--file argument.")
            sys.exit(1)
        
        # Save to file if specified
        if args.output:
            try:
                with open(args.output, 'w', encoding='utf-8') as f:
                    json.dump(results, f, indent=2)
                print(f"Results saved to {args.output}")
            except Exception as e:
                print(f"Error saving results: {str(e)}")
    
    # Print results to console
    print(json.dumps(results, indent=2))

if __name__ == "__main__":
    main()
